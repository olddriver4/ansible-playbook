user  {{ nginx_user }};
worker_processes  auto;
worker_cpu_affinity auto;
worker_shutdown_timeout 5s;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


load_module modules/ngx_http_geoip2_module.so;
load_module modules/ngx_stream_geoip2_module.so;

events {
    worker_connections  10240;
    use epoll;
}


http {

    include       mime.types;
    default_type  application/octet-stream;


    geoip2 modules/GeoLite2-Country.mmdb {
         auto_reload 5m;
         $geoip2_metadata_country_build metadata build_epoch;
         #国家编码
         $geoip2_country_code source=$remote_addr country iso_code;
         #国家英文名
         $geoip2_country_name_en source=$remote_addr country names en;
         #国家中文名
         #$geoip2_country_name_cn source=$remote_addr country names zh-CN;
    }

    geoip2 modules/GeoLite2-City.mmdb {
         auto_reload 5m;
         $geoip2_metadata_city_build metadata build_epoch;
         #城市ID
         $geoip2_data_city_code source=$remote_addr city geoname_id;
         #城市英文名
         $geoip2_city_name_en source=$remote_addr city names en;
         #城市中文名
         #$geoip2_city_name_cn source=$remote_addr city names zh-CN;
    }
    #access_log  logs/access.log  main;
    
    log_format main_post escape=json '{'
                    '"msec": "$msec", ' # request unixtime in seconds with a milliseconds resolution
                    '"connection": "$connection", ' # connection serial number
                    '"connection_requests": "$connection_requests", ' # number of requests made in connection
                    '"pid": "$pid", ' # process pid
                    '"request_id": "$request_id", ' # the unique request id
                    '"request_length": "$request_length", ' # request length (including headers and body)
                    '"remote_addr": "$remote_addr", ' # client IP
                    '"remote_user": "$remote_user", ' # client HTTP username
                    '"remote_port": "$remote_port", ' # client port
                    '"time_local": "$time_local", '
                    '"time_iso8601": "$time_iso8601", ' # local time in the ISO 8601 standard format
                    '"request": "$request", ' # full path no arguments if the request
                    '"request_uri": "$request_uri", ' # full path and arguments if the request
                    '"args": "$args", ' # args
                    '"status": "$status", ' # response status code
                    '"body_bytes_sent": "$body_bytes_sent", ' # the number of body bytes exclude headers sent to a client
                    '"bytes_sent": "$bytes_sent", ' # the number of bytes sent to a client
                    '"http_referer": "$http_referer", ' # HTTP referer
                    '"http_user_agent": "$http_user_agent", ' # user agent
                    '"http_x_forwarded_for": "$http_x_forwarded_for", ' # http_x_forwarded_for
                    '"http_host": "$http_host", ' # the request Host: header
                    '"server_name": "$server_name", ' # the name of the vhost serving the request
                    '"request_time": "$request_time", ' # request processing time in seconds with msec resolution
                    '"upstream": "$upstream_addr", ' # upstream backend server for proxied requests
                    '"upstream_connect_time": "$upstream_connect_time", ' # upstream handshake time incl. TLS
                    '"upstream_header_time": "$upstream_header_time", ' # time spent receiving upstream headers
                    '"upstream_response_time": "$upstream_response_time", ' # time spend receiving upstream body
                    '"upstream_response_length": "$upstream_response_length", ' # upstream response length
                    '"upstream_cache_status": "$upstream_cache_status", ' # cache HIT/MISS where applicable
                    '"ssl_protocol": "$ssl_protocol", ' # TLS protocol
                    '"ssl_cipher": "$ssl_cipher", ' # TLS cipher
                    '"scheme": "$scheme", ' # http or https
                    '"request_method": "$request_method", ' # request method
                    '"server_protocol": "$server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
                    '"pipe": "$pipe", ' # "p" if request was pipelined, "." otherwise
                    '"gzip_ratio": "$gzip_ratio", '
                    '"http_cf_ray": "$http_cf_ray",'
                    '"geoip_country_code": "$geoip2_country_code",'
                    '"geoip_country_name": "$geoip2_country_name_en",'
                    '"geoip_city_code": "$geoip2_data_city_code",'
                    '"geoip_city_name": "$geoip2_city_name_en"'
                    '}'; 

    log_format  main  '$remote_addr - $remote_user [$time_local] $request_method "$uri" "$host" "$query_string" '
                      '$status $body_bytes_sent "$http_referer" $upstream_status $upstream_addr $request_time $upstream_response_time '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    variables_hash_max_size 4096;
    variables_hash_bucket_size 2048;

    sendfile        on;
    tcp_nopush     on;
    keepalive_timeout  60;
    gzip  on;
    server_tokens off;

    client_max_body_size 5m;
    client_body_buffer_size 512k;
 
    map $http_upgrade $connection_upgrade {
      default upgrade;
      ''      close;
    }

    include {{ nginx_dir }}/vhosts/*.conf;
    include {{ nginx_dir }}/upstream/*.conf;

    map $http_x_forwarded_for  $clientRealIpTmp {
        ""      $remote_addr;
        ~*^(?P<firstAddr>[0-9a-f\.:]+),?.*$     $firstAddr;
    }

    map $http_cf_connecting_ip  $clientRealIp {
        ""      $clientRealIpTmp;
        ~*([0-9a-f\.:]+) $http_cf_connecting_ip;
    }

    limit_req_log_level error;
    geo $remote_addr $mainnet_whitelist {
       default 0;
       include {{ nginx_dir }}/conf.secure/mainnet_whitelist.conf;
    }
    geo $remote_addr $testnet_whitelist {
       default 0;
       include {{ nginx_dir }}/conf.secure/testnet_whitelist.conf;
    }
 
    map $mainnet_whitelist $mainnet_limit_key {
       0 $binary_remote_addr;
       1 "";
    }
 
    map $testnet_whitelist $testnet_limit_key {
       0 $binary_remote_addr;
       1 "";
    }
    
    limit_req_zone $mainnet_limit_key zone=mainnet_limit_zone:10m rate=100r/s;
    limit_req_zone $testnet_limit_key zone=testnet_limit_zone:10m rate=100r/s;

    lua_shared_dict shared_ip_blacklist 8m; #定义ip_blacklist 本地缓存变量
}
